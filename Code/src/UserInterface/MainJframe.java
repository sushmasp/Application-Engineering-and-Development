/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.Branch.Branch;
import Business.Business;
import Business.DB4OUtil.DB4OUtil;
import Business.Department.Department;
import Business.Log;
import Business.Region.Region;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author kurki
 */
public class MainJframe extends javax.swing.JFrame {

    /**
     * Creates new form MainJframe
     */
    private Business business;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private int randomInt;
    private UserAccount userAccount = null;
    private  Region inRegion = null;
    private Branch inBranch = null;
    private Department inDepartment = null;
     
    public MainJframe() {
        initComponents();
        business = dB4OUtil.retrieveBusiness();
        btnLogout.setEnabled(false);
        comboUser.removeAllItems();
        comboUser.addItem("Employee");
        comboUser.addItem("Customer");
        IPAddressGeneration();
        
    }
    
    private void IPAddressGeneration()
    {
         // IP Address Generation 
          
      //Specific Range For Customers and Billers
      if(comboUser.getSelectedItem().equals("Customer") )
      {
          Random randomGenerator = new Random();
          int minimum = 101;
          int maximum = 500;
          int range = maximum - minimum + 1;
          randomInt =  randomGenerator.nextInt(range) + minimum;
           
      }
      
      /*Specific Range For Employees
      
      //  Condition to check when :
      randomInt = 200;
      */
      
      else if (comboUser.getSelectedItem().equals("Employee"))
      {
          Random randomGenerator = new Random();
          int minimum = 1;
          int maximum = 100;
          int range = maximum - minimum + 1;
          randomInt =  randomGenerator.nextInt(range) + minimum;
         
      }
      
      /* For Random(Invalid Users) IP depends on the role chosen 
         but further on Login UserName doesn't exists and thus identified as "Invalid User"*/
      
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        loginJPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        btnLogin = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        txtPassWord = new javax.swing.JPasswordField();
        comboUser = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        UserProcessContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(200);

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        comboUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Role");

        javax.swing.GroupLayout loginJPanelLayout = new javax.swing.GroupLayout(loginJPanel);
        loginJPanel.setLayout(loginJPanelLayout);
        loginJPanelLayout.setHorizontalGroup(
            loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginJPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginJPanelLayout.createSequentialGroup()
                            .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel2)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtUsername)
                        .addComponent(txtPassWord)
                        .addComponent(comboUser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        loginJPanelLayout.setVerticalGroup(
            loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginJPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtPassWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(comboUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(loginJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogin)
                    .addComponent(btnLogout))
                .addContainerGap(210, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(loginJPanel);

        UserProcessContainer.setLayout(new java.awt.CardLayout());
        jSplitPane1.setRightComponent(UserProcessContainer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // To get Username
        String userName = txtUsername.getText();
        // To get Password
        char[] passwordCharArray = txtPassWord.getPassword();
        String password = String.valueOf(passwordCharArray);
        String selectedRole = String.valueOf(comboUser.getSelectedItem());
        
        if(txtUsername.equals(""))
        {
             JOptionPane.showMessageDialog(null, "Username is mandatory");
             if(txtPassWord.equals(""))
             {
                 JOptionPane.showMessageDialog(null, "Password is mandatory");
             }
        }

        //Step1: Check in the system user account directory if you have the user
        userAccount = business.getUserAccountDirectory().authenticateUser(userName, password,selectedRole);

        if (userAccount == null)
        {
            //Step2: Go inside each region to check each branch
            for (Region region: business.getRegionDirectory().getRegionList()) 
            {
                userAccount = region.getUserAccountDirectory().authenticateUser(userName, password,selectedRole);
                if(userAccount == null)
                {
                //Step 2-a: Check against each branch
                for (Branch branch : region.getBranchDirectory().getBranchList())
                {
                    userAccount = branch.getUserAccountDirectory().authenticateUser(userName, password,selectedRole);
                    if (userAccount == null)
                    {
                        //Step3: Check against each department inside that branch
                        for (Department department : branch.getDepartmentDirectory().getDepartmentList())
                        {
                            userAccount = department.getUserAccountDirectory().authenticateUser(userName, password,selectedRole);
                            if (userAccount != null)
                            {
                                //inRegion = region;       
                                inBranch = branch;
                                inDepartment = department;
                                break;
                            }
                        }
                    } 
                    else 
                    {
                        //inRegion = region;
                        inBranch = branch;
                        break;
                    }
                    if(inDepartment!=null){
                        break;
                    }
                 
                }
            }
            else 
              {
                inRegion = region;
                break;
               }
         if(inBranch!=null)
         {
           break;
          }
      }
  }
 
      // Current time
      Calendar cal = Calendar.getInstance();
      SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy  HH:mm:ss"); 
      String time=sdf.format(cal.getTime());
      
      /* Condition to check
      String time="04-22-2016 04:00:00";*/
      
      
       Log log = business.getLogDirectory().addLog();
       
       // For Successful Login(Employees,Customers and Billers)
       if(userAccount!=null)
       {
           if(userAccount.getIsLocked()==true)
           {   
            log.setIPAddress(randomInt);
            log.setRegion(inRegion);
            log.setBranch(inBranch);
            log.setDepartment(inDepartment);
            log.setMessage("Locked Account");
            log.setName(userAccount.getPerson().toString());
            log.setRole(userAccount.getRole().getRoleType());
            log.setTime(time);
            JOptionPane.showMessageDialog(null, "Your account has been locked due to suspicious activities.Please unlock the account to proceed.","WARNING",JOptionPane.WARNING_MESSAGE);
            
            ResetPasswordJPanel reset = new ResetPasswordJPanel(UserProcessContainer,userAccount);
            UserProcessContainer.add("ResetPasswordJPanel",reset);
            CardLayout layout = (CardLayout)UserProcessContainer.getLayout(); 
            layout.next(UserProcessContainer);   
            
           }
           else
           {
            log.setIPAddress(randomInt);
            log.setRegion(inRegion);
            log.setBranch(inBranch);
            log.setDepartment(inDepartment);
            log.setMessage("Successful Login");
            log.setName(userAccount.getPerson().toString());
            log.setRole(userAccount.getRole().getRoleType());
            log.setTime(time);
           }
         
       }
       else
       {
       // For Failed Logins(Correct Usernames But Incorrect Passwords)
       
        // To check whether if Username exists  i.e. User exists
         UserAccount account = null;
         
         if(!(business.getUserAccountDirectory().getUserAccountList().isEmpty()))
            {
              account = business.getUserAccountDirectory().checkIfUsernameIsVaid(userName);
              if(account==null)
              {
                for(Region region: business.getRegionDirectory().getRegionList())
                    {
                        account=region.getUserAccountDirectory().checkIfUsernameIsVaid(userName);
                        if(account==null)
                        {
                            for(Branch branch: region.getBranchDirectory().getBranchList())
                            {
                                account = branch.getUserAccountDirectory().checkIfUsernameIsVaid(userName);
                                if(account == null)
                                {
                                    for(Department department: branch.getDepartmentDirectory().getDepartmentList())
                                    {
                                        account = department.getUserAccountDirectory().checkIfUsernameIsVaid(userName);
                                        if(account!=null)
                                        {
                                          inRegion = region;       
                                          inBranch = branch;
                                          inDepartment = department;
                                          break;  
                                        } 
                                    }
                                }
                                else
                                {
                                   inRegion = region;
                                   inBranch = branch;
                                }
                            }
                        }
                        else
                        {
                            inRegion = region;               
                        }
                    }  
              }
            }
      
         //For Failed Login(Employees,Customers and Billers)--Correct Username But Incorrect Password
         if (account!=null)
         {
           log.setIPAddress(randomInt);
           log.setRegion(inRegion);
           log.setBranch(inBranch);
           log.setDepartment(inDepartment);
           log.setMessage("Failed Login");
           log.setName(account.getPerson().toString());
           log.setRole(account.getRole().getRoleType());
           log.setTime(time);
         } 
         
        // For random users
         else
         {
           log.setIPAddress(randomInt);
           log.setRegion(null);
           log.setBranch(null);
           log.setDepartment(null);
           log.setMessage("Invalid User");
           log.setName(userName);
           log.setRole(null);
           log.setTime(time);
         }
       }
        if (userAccount == null) 
        {
            JOptionPane.showMessageDialog(null, "Invalid Credentails");
            return;
        }
        else 
        {
            if(userAccount.getIsLocked()==false)
            {
            CardLayout layout = (CardLayout) UserProcessContainer.getLayout();
            UserProcessContainer.add("WorkArea", userAccount.getRole().createWorkArea(UserProcessContainer, userAccount, inRegion, inBranch, inDepartment, business));
            layout.next(UserProcessContainer);
            
            btnLogin.setEnabled(false);
        comboUser.setEnabled(false);
        btnLogout.setEnabled(true);
        txtUsername.setEnabled(false);
        txtPassWord.setEnabled(false);
            
            }
            
        }
   
        

    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
       
            // Current time
         Calendar cal = Calendar.getInstance();
         SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy  HH:mm:ss"); 
         String timeOut=sdf.format(cal.getTime());
        
         // For Successful Logout(Employees,Customers and Billers)
         
          Log log = business.getLogDirectory().addLog();
 
          log.setIPAddress(randomInt);
          log.setRegion(inRegion);
          log.setBranch(inBranch);
          log.setDepartment(inDepartment);
          log.setMessage("Successful Logout");
          log.setName(userAccount.getPerson().toString());
          log.setRole(userAccount.getRole().getRoleType());
          log.setTime(timeOut);
   
        btnLogout.setEnabled(false);
        txtUsername.setEnabled(true);
        txtPassWord.setEnabled(true);
        btnLogin.setEnabled(true);
        comboUser.setEnabled(true);

        txtUsername.setText("");
        txtPassWord.setText("");
        comboUser.removeAllItems();
        comboUser.addItem("Employee");
        comboUser.addItem("Customer");

        UserProcessContainer.removeAll();
        JPanel blankJPanel = new JPanel();
        UserProcessContainer.add("blank", blankJPanel);
        CardLayout layout = (CardLayout) UserProcessContainer.getLayout();
        layout.next(UserProcessContainer);
        dB4OUtil.storeBusiness(business);
                                   
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel UserProcessContainer;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JComboBox<String> comboUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel loginJPanel;
    private javax.swing.JPasswordField txtPassWord;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
