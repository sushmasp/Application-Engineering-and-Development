/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Customer;

import Business.Account.Account;
import Business.Biller.Biller;
import Business.Branch.Branch;
import Business.Business;
import Business.Customer.Customer;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author kurki
 */
public class BillPaymentJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Branch branch;
    private UserAccount userAccount;
    private Business business;
    private Customer fromCustomer;
    private ArrayList<Account> accountList;
    private ArrayList<Biller> billerList;
    
    public BillPaymentJPanel(JPanel userProcessContainer,Branch branch,UserAccount userAccount,Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.branch = branch;
        this.userAccount = userAccount;
        this.business = business;
        
        txtCheckingBalance.setEnabled(false);
        txtSavingsBalance.setEnabled(false);
        
         // From Customer Accounts
   
        fromCustomer = (Customer)userAccount.getPerson();  
        accountList = fromCustomer.getAccountDirectory().getAccountList();
        
        populateAccountBalances();
        
        // To populate From Account Lists
        comboFrom.removeAllItems();
        for(Account a: accountList )
        {
            comboFrom.addItem(a);
        }

        // To populate Billers List
        comboTo.removeAllItems();
        for(Biller b: business.getBillerDirectory().getBillerList())
        {
           comboTo.addItem(b);
        }

    }
    
    public void populateAccountBalances()
    {
        for(Account a : accountList)
        {
            if(a.getAccountName().equals(Account.AccountType.CheckingAccount.getValue()))
            {
                txtCheckingBalance.setText(String.valueOf(a.getAccountBalance()));
            }
            else if(a.getAccountName().equals(Account.AccountType.SavingsAccount.getValue()))
            {
               txtSavingsBalance.setText(String.valueOf(a.getAccountBalance())); 
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        comboFrom = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        comboTo = new javax.swing.JComboBox();
        btnBack = new javax.swing.JButton();
        txtAmount = new javax.swing.JTextField();
        txtSavingsBalance = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtCheckingBalance = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        lblFrom = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        lblAmount = new javax.swing.JLabel();
        btnTransfer = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("Checking Account Balance");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 102, 154, -1));

        comboFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(comboFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 234, 213, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Bill Payment");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(302, 20, 190, -1));

        jLabel13.setText("Savings Account Balance");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 133, 154, -1));

        comboTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboToActionPerformed(evt);
            }
        });
        add(comboTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 272, 213, -1));

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 488, -1, -1));
        add(txtAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 310, 213, -1));
        add(txtSavingsBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(227, 130, 107, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Bill Payment");
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 202, 114, -1));
        add(txtCheckingBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(227, 99, 107, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Account Details");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 67, 130, -1));

        lblFrom.setText("From Account   ");
        add(lblFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 237, -1, -1));

        lblTo.setText("To Biller");
        add(lblTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 275, 75, -1));

        lblAmount.setText("Amount ");
        add(lblAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 313, 75, -1));

        btnTransfer.setText("Transfer");
        btnTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferActionPerformed(evt);
            }
        });
        add(btnTransfer, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 366, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void comboToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboToActionPerformed
        
    }//GEN-LAST:event_comboToActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferActionPerformed

        Double amount;

        if (txtAmount.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Amount is mandatory.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }

        try
        {
            amount = Double.parseDouble(txtAmount.getText().trim());
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null,"Amount can only be a numeric value.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }

        Account from = (Account)comboFrom.getSelectedItem();
        Double balance = from.getAccountBalance();

        if(amount>balance)
        {
            JOptionPane.showMessageDialog(null,"Insufficient Balance","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }

        //TO BILLER
    
            Account fromAccount = (Account)comboFrom.getSelectedItem();

            Double oldAccountBalance;
            //To debit the amount from FromAccount
            for(Account a : accountList)
            {
                if(a==fromAccount)
                {
                    oldAccountBalance= fromAccount.getAccountBalance();
                    a.setAccountBalance(oldAccountBalance - amount);
                }
            }

            //To credit the amount to To Payee(Checking Account)
            Biller biller = (Biller) comboTo.getSelectedItem();
            ArrayList<Account> billerAccountList = biller.getAccountDirectory().getAccountList();
            for(Account a : billerAccountList)
            {
                if(a.getAccountName().equals(Account.AccountType.CheckingAccount.getValue()))
                {
                    oldAccountBalance= a.getAccountBalance();
                    a.setAccountBalance(oldAccountBalance + amount);
                }
            } 

        JOptionPane.showMessageDialog(null, "Payment is successful.","INFORMATION",JOptionPane.INFORMATION_MESSAGE);

        txtAmount.setText("");
        populateAccountBalances();

    }//GEN-LAST:event_btnTransferActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnTransfer;
    private javax.swing.JComboBox comboFrom;
    private javax.swing.JComboBox comboTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblTo;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtCheckingBalance;
    private javax.swing.JTextField txtSavingsBalance;
    // End of variables declaration//GEN-END:variables
}
