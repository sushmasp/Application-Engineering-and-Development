/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.LoanEmployee;

import Business.Account.Account;
import Business.Branch.Branch;
import Business.Customer.Customer;
import Business.Department.Department;
import Business.Employee.Employee;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LoanWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author kurki
 */
public class ViewLoanDetailsEmployeeJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private LoanWorkRequest loanWorkrequest;
    private Branch branch;
    private Department department;
    private UserAccount userAccount;
    
    public ViewLoanDetailsEmployeeJPanel(JPanel userProcessContainer,LoanWorkRequest loanWorkrequest,Branch branch,Department department,UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.loanWorkrequest = loanWorkrequest;
        this.branch = branch;
        this.department = department;
        this.userAccount = userAccount;
        
         btnSave.setEnabled(false);
        if(loanWorkrequest.getStatus().equals("Approved") || loanWorkrequest.getStatus().equals("Declined") || loanWorkrequest.getStatus().equals("Processed"))
        {
            btnUpdate.setEnabled(false);
        }
        else
        {
            btnUpdate.setEnabled(true);
        }
        
        comboStatus.removeAllItems();
        comboStatus.addItem("Open");
        comboStatus.addItem("Processed");
        comboStatus.addItem("Approved");
        comboStatus.addItem("Rejected");
        
        txtID.setText(String.valueOf(loanWorkrequest.getLoanWorkRequestID()));
        txtCustomer.setText(loanWorkrequest.getCustomer().toString());
        txtEmployee.setText(loanWorkrequest.getEmployee().toString());
        txtCustomerRequestedAmount.setText(String.valueOf(loanWorkrequest.getCustomeRrequestedLoanAmount()));
        txtEmployeeSuggestedAmount.setText(String.valueOf(loanWorkrequest.getEmployeeSuggestedLoanAmount()));
        txtLoanInterestRate.setText(String.valueOf(loanWorkrequest.getInterestRate()));
        txtMessage.setText(String.valueOf(loanWorkrequest.getMessage()));
        txtPurpose.setText(String.valueOf(loanWorkrequest.getPurpose()));
        txtRequestedDate.setText(String.valueOf(loanWorkrequest.getRequestDate()));
        comboStatus.setSelectedItem(loanWorkrequest.getStatus());
        
        btnSave.setEnabled(false);
        txtMessage.setEnabled(false);
        txtLoanInterestRate.setEnabled(false);
        comboStatus.setEnabled(false);
        txtCustomer.setEnabled(false);
        txtEmployee.setEnabled(false);
        txtCustomerRequestedAmount.setEnabled(false);
        txtID.setEnabled(false);
        txtMessage.setEnabled(false);
        txtPurpose.setEnabled(false);
        txtRequestedDate.setEnabled(false);
        txtCheckingBalance.setEnabled(false);
        txtSavingsBalance.setEnabled(false);
        txtUnutilized.setEnabled(false);
        txtDate.setEnabled(false);
        txtEmployeeSuggestedAmount.setEnabled(false);
        
        Customer c = loanWorkrequest.getCustomer();
        txtUnutilized.setText(String.valueOf(c.getMaxLoanAmountBalanceAvailable()));
        
        ArrayList<Account> accountList = c.getAccountDirectory().getAccountList();
        for(Account a : accountList)
        {
            if(a.getAccountName().equals(Account.AccountType.CheckingAccount.getValue()))
            {
                txtCheckingBalance.setText(String.valueOf(a.getAccountBalance()));
                txtDate.setText(a.getCreationDate());
            }
            else if(a.getAccountName().equals(Account.AccountType.SavingsAccount.getValue()))
            {
               txtSavingsBalance.setText(String.valueOf(a.getAccountBalance())); 
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtMessage = new javax.swing.JTextField();
        txtEmployee = new javax.swing.JTextField();
        txtPurpose = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        txtEmployeeSuggestedAmount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCustomerRequestedAmount = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtLoanInterestRate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtRequestedDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboStatus = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        txtCustomer = new javax.swing.JTextField();
        txtID = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtUnutilized = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtSavingsBalance = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtCheckingBalance = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("View Loan Details");

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel2.setText("Loan Request ID");

        jLabel3.setText("Customer Requested");

        jLabel4.setText("Employee Processed");

        jLabel5.setText("Message");

        jLabel6.setText("Status");

        jLabel7.setText("Requested Date");

        comboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setText("Purpose of Loan");

        jLabel10.setText("Customer Requested Amount ");

        jLabel11.setText("Employee Suggested Amount");

        jLabel12.setText("Loan Interest Rate");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel17.setText("Eligible Loan Amount Balance");

        jLabel16.setText("Customer since");

        jLabel18.setText("Checking Account Balance");

        jLabel19.setText("Savings Account Balance");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Customer Details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(285, 285, 285)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtCustomerRequestedAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtEmployeeSuggestedAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(btnUpdate)
                .addGap(43, 43, 43)
                .addComponent(btnSave))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(btnBack))
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(txtPurpose, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(txtCheckingBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(txtSavingsBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtUnutilized, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(txtRequestedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtLoanInterestRate, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel18))
                            .addComponent(txtCheckingBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel19))
                            .addComponent(txtSavingsBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel16))
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUnutilized, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPurpose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCustomerRequestedAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmployeeSuggestedAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLoanInterestRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRequestedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdate)
                    .addComponent(btnSave))
                .addGap(58, 58, 58)
                .addComponent(btnBack))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        LoanRequestsProcessedByHim loanRequests = (LoanRequestsProcessedByHim) component;
        loanRequests.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        btnSave.setEnabled(true);
        txtMessage.setEnabled(true);
        txtEmployeeSuggestedAmount.setEnabled(true);
        txtLoanInterestRate.setEnabled(true);
        comboStatus.setEnabled(true);
        comboStatus.removeAllItems();
        comboStatus.addItem("Processed");
        btnUpdate.setEnabled(false);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        double interestrate =0;
        double suggestedAmount = 0;

        // To check for mandatory fields
        if (txtEmployeeSuggestedAmount.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Employee Suggested Amount is mandatory.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (txtLoanInterestRate.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Loan Interest Rate is mandatory.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }

        if(comboStatus.getSelectedItem().equals("Open"))
        {
            JOptionPane.showMessageDialog(null,"Status cannot be open.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(comboStatus.getSelectedItem().equals("Approved") || comboStatus.getSelectedItem().equals("Declined"))
        {
            JOptionPane.showMessageDialog(null,"Employee can only process the Loan Request.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Code to validate  numeric value

        try
        {
            interestrate = Double.parseDouble(txtLoanInterestRate.getText().trim());
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null,"Loan Interest Rate can only be a numeric value.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }

        try
        {
            suggestedAmount = Double.parseDouble(txtEmployeeSuggestedAmount.getText().trim());
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null,"Employee Suggested Amount can only be a numeric value.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(suggestedAmount<=0.0)
        {
            JOptionPane.showMessageDialog(null,"Employee Suggested Amount cannot be zero or lesser.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(suggestedAmount>Double.parseDouble(txtCustomerRequestedAmount.getText().trim()))
        {
            JOptionPane.showMessageDialog(null,"Employee Suggested Amount cannot be greater than Customer Requested Amount.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (interestrate<=0)
        {
            JOptionPane.showMessageDialog(null,"Interest Rate cannot be zero or lesser.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (interestrate>50)
        {
            JOptionPane.showMessageDialog(null,"Interest Rate cannot be greater than 50%.","WARNING",JOptionPane.WARNING_MESSAGE);
            return;
        }
        

        // Setting the status of loan request in the work queue of customer requested
        Employee emp =loanWorkrequest.getEmployee();
        Customer cus = loanWorkrequest.getCustomer();
        for(UserAccount ua:branch.getUserAccountDirectory().getUserAccountList())
        {
            if(ua.getPerson()==cus)
            {
                for(WorkRequest w : ua.getWorkQueue().getWorkRequestList())
                {
                    if(w instanceof LoanWorkRequest)
                    {
                        if(w==loanWorkrequest)
                        {
                            w.setStatus((String)comboStatus.getSelectedItem());
                            ((LoanWorkRequest) w).setEmployeeSuggestedLoanAmount(suggestedAmount);
                            ((LoanWorkRequest) w).setInterestRate(interestrate);
                            w.setMessage(txtMessage.getText().trim());
                        }
                    }
                }
            }
        }
        
        
        // Setting the status of loan request in the work queue of employee processed

                    for(WorkRequest w : userAccount.getWorkQueue().getWorkRequestList())
                    {
                        if(w instanceof LoanWorkRequest)
                        {
                            if(w==loanWorkrequest)
                            {
                            w.setStatus((String)comboStatus.getSelectedItem());
                            ((LoanWorkRequest) w).setEmployeeSuggestedLoanAmount(suggestedAmount);
                            ((LoanWorkRequest) w).setInterestRate(interestrate);
                            w.setMessage(txtMessage.getText().trim());
                            }
                        }
                    }
                    
           // Setting the status in Branch's Loan Department's WorkQueue 
         for(Department d:branch.getDepartmentDirectory().getDepartmentList())
         {
             if(d.getDepartmentName().equals(Department.DepartmentType.LoanDepartment.getValue()))
             {
                 for(WorkRequest w :d.getWorkQueue().getWorkRequestList())
                 {
                     if(w instanceof LoanWorkRequest)
                        {
                            if(w==loanWorkrequest)
                            {
                                w.setStatus((String)comboStatus.getSelectedItem());
                                ((LoanWorkRequest) w).setEmployeeSuggestedLoanAmount(suggestedAmount);
                                ((LoanWorkRequest) w).setInterestRate(interestrate);
                                w.setMessage(txtMessage.getText().trim());
                            }
                        }
                 }
                 
             }
         }
        
        

        JOptionPane.showMessageDialog(null, "Loan Request is updated successfully.","INFORMATION",JOptionPane.INFORMATION_MESSAGE);

        btnSave.setEnabled(false);
        txtMessage.setEnabled(false);
        txtEmployeeSuggestedAmount.setEnabled(false);
        txtLoanInterestRate.setEnabled(false);
        comboStatus.setEnabled(false);
        btnUpdate.setEnabled(true);
        if(loanWorkrequest.getStatus().equals("Approved"))
        {
            btnUpdate.setEnabled(false);
        }
        else
        {
            btnUpdate.setEnabled(true);
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtCheckingBalance;
    private javax.swing.JTextField txtCustomer;
    private javax.swing.JTextField txtCustomerRequestedAmount;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtEmployee;
    private javax.swing.JTextField txtEmployeeSuggestedAmount;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLoanInterestRate;
    private javax.swing.JTextField txtMessage;
    private javax.swing.JTextField txtPurpose;
    private javax.swing.JTextField txtRequestedDate;
    private javax.swing.JTextField txtSavingsBalance;
    private javax.swing.JTextField txtUnutilized;
    // End of variables declaration//GEN-END:variables
}
